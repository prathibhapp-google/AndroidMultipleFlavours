apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.example.pprabhakaran.androidmultipleflavors"
        minSdkVersion 23
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    productFlavors{
        flavorDimensions "price", "locate"
        paid{
            dimension "price"
            applicationId "com.example.pprabhakaran.androidmultipleflavors.paid"
            version 2
            versionName "2.0"
        }
        free{
            dimension "price"
        }
        USA{
            dimension "locate"
            applicationId "com.example.pprabhakaran.androidmultipleflavors.usa"
        }
        UK{
            dimension "locate"
            applicationId "com.example.pprabhakaran.androidmultipleflavors.uk"
        }
    }

    splits {
        density {
            enable true
            exclude "tvdpi", "xxxhdpi"
            compatibleScreens 'small', 'normal', 'large', 'xlarge'
        }

        abi{
            enable true
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            String density = output.getFilter(com.android.build.OutputFile.DENSITY);
            output.versionCodeOverride = (variant.mergedFlavor.versionCode * 100) + getDpiId(density);
        }
        variant.assemble.doLast {
            variant.outputs.each { output ->
                if (output.zipAlign) {
                   // archiveAPK(variant, output);
                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.1.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4'
    testCompile 'junit:junit:4.12'
}

def getDpiId(String density) {
    def DPI_ID = ['null': 0, 'ldpi': 1, 'mdpi': 2, 'hdpi': 3, 'xhdpi': 4, 'xxhdpi': 5]
    if (density != null)
        return DPI_ID.get(density);
    return 0;
}

def getAPKArchiveFolder(variant) {
    return "${rootDir}/archive/" + "V" + variant.mergedFlavor.versionCode;
}

def renameAPKFile(variant, density) {

    def fileName = variant.name.toUpperCase()
    fileName += "-" + variant.mergedFlavor.versionName;
    fileName += "-V" + variant.mergedFlavor.versionCode;
    fileName += "-" + getDpiId(density);
    fileName += "-" + getDpiName(density);
    fileName += ".apk";
    return fileName;
}

def archiveAPK(variant, output) {

    String density = output.getFilter(com.android.build.OutputFile.DENSITY);
    def originZipAlignedApkFile = "${variant.name}-${variant.versionName}.apk";
    def renameAPKFile = renameAPKFile(variant, density);
    copy {
        from "$originZipAlignedApkFile"
        into getAPKArchiveFolder(variant)
        rename("$originZipAlignedApkFile.name", "$renameAPKFile")
    }
}
